import sys
from models.model_factory import *
from utils.load_data import load_dataset
from keras.optimizers import Adam

class obj(object):
    def __init__(self, d):
        for a, b in d.items():
            if isinstance(b, (list, tuple)):
                setattr(self, a, [obj(x) if isinstance(x, dict) else x for x in b])
            else:
                setattr(self, a, obj(b) if isinstance(b, dict) else b)


if __name__ == "__main__":
    wname = sys.argv[1]
    cf = {
        "architecture": "RESNET",
        "dim": 32,
        "channels": 3,
        "classes": 10,
        "nres": 3,
        "pfilt": 1,
        "kernel_initializer": 'glorot_uniform',
        "kernel_regularizer": 0.0,
        "dataset": "CIFAR-10",
        "network_type": "float",
        "wbits": 4,
        "abits": 4
    }
    cf = obj(cf)
    train_data, val_data, test_data = load_dataset(cf.dataset, cf)
    model = build_model(cf)
    adam = Adam(lr=1e-3)
    loss = 'categorical_crossentropy'
    model.compile(loss=loss, optimizer=adam, metrics=['accuracy'])
    model.load_weights(wname)
    datagen = ImageDataGenerator(
        featurewise_center=False, # set input mean to 0 over the dataset
        samplewise_center=False, # set each sample mean to 0
        featurewise_std_normalization=False, # divide inputs by std of dataset
        samplewise_std_normalization=False, # divide each input by its std
        zca_whitening=False, # apply ZCA whitening
        zca_epsilon=1e-06, # epsilon for ZCA whitening
        rotation_range=0, # randomly rotate images in the range (deg 0 to 180)
        width_shift_range=0.1, # randomly shift images horizontally
        height_shift_range=0.1, # randomly shift images vertically
        shear_range=0., # set range for random shear
        zoom_range=0., # set range for random zoom
        channel_shift_range=0., # set range for random channel shifts
        fill_mode='nearest', # set mode for filling points outside the input boundaries
        cval=0., # value used for fill_mode = "constant"
        horizontal_flip=True, # randomly flip images
        vertical_flip=False, # randomly flip images
        rescale=None, # set rescaling factor (applied before any other transformation)
        preprocessing_function=None, # set function that will be applied on each input
        data_format=None,) # image data format, either "channels_first" or "channels_last"
        # validation_split=0.0) # fraction of images reserved for validation (strictly between 0 and 1)

    # Compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(train_data.X)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(train_data.X,train_data.y, batch_size=128),
                        epochs=20,
                        verbose=1,
                        callbacks=None,
                        validation_data=(val_data.X,val_data.y))
    score = model.evaluate(test_data.X, test_data.y)
    print(score)
